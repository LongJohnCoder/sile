\begin{document}
\chapter{Getting Started}

Now that we understand some of what SILE is about and what it seeks to do,
let’s dive into SILE itself.

\section{A Basic SILE Document}

Before we show you how to use SILE, let’s have a look at an example of what
SILE documents look like. This is the input that we’re going to feed to SILE,
which it is going to process and turn into a PDF file. Each of the examples can
be saved as a text file and then use them as input to SILE.

\note{These documents are \em{plain text} files; when you create your own SILE
files, you will need to create them in a plain text editor. Trying to create
these files in a word processor such as Word will not work as they will be
saved with the word processor’s formatting rather than in a plain text format.
Examples of good text editors include cross platform editors such as Atom and
Sublime Text which are GUI oriented or Vim and Emacs which are more keyboard
command oriented. Depending on your operating system there are other good
choices such as Notepad++ on Windows or TextMate on OS X. You can also get
started more simply with one of the basic editors built into your desktop
environment such as Notepad on Windows, TextEdit on OS X, Gedit on Gnome, Kate
on KDE, etc. For comparisons of text editors see
\url{http://alternativeto.net/tag/text-editor/} and select your platform.}

To begin with, here’s the most basic SILE file of all:

\begin{verbatim}
\line
\\begin\{document\}
Hello SILE!
\\end\{document\}
\line
\end{verbatim}

We’ll pick apart this document in the next chapter, but for now take it on
trust that this is what a SILE document looks like.

At the risk of belabouring the obvious, this is going to produce an A4-sized PDF
document, with the text \examplefont{Hello SILE} at the top left, and the page
number (1) centered at the bottom. How are we going to get to that PDF?

\section{Installing}

First of all, we need to get ahold of SILE and get it running on our computer.
Downloads of SILE can be obtained from the home page at \silehp.

\subsection{Installing Preconfigured Packages}

For OS X machines the recommended way to install SILE is through the Homebrew
package manager. Once you have Homebrew running (see \url{http://brew.sh}),
installing SILE is as easy as running:

\terminal{$ brew install sile}

If you have not used Lua programs before, that will prompt you to manually
install a couple of dependencies. After running the commands it provides, you can
run the install command again to complete the installation.

The formula also has an instruction that can compile SILE from the current
Git HEAD version. To test the latest unreleased code you can install using:

\terminal{$ brew install sile --HEAD}

For Linux users, preconfigured package build files are available for Arch
Linux. The \code{sile} package has the latest stable release while the
\code{sile-git} package will build a package using the latest unreleased code
from the Git repository. If you use a package manager with AUR support you can
install either one as you would any other package:

\terminal{$ yay -S sile}

For all other systems you will need to follow the steps to download and compile
the source yourself.

\subsection{Installing From Source}

SILE requires a number of other software packages to be installed on the
computer before it can work—the Lua programming language, and the Harfbuzz text
shaping library. SILE provides its own PDF creation library, which has its own
requirements: \code{freetype}, \code{fontconfig}, \code{libz} and
\code{libpng}.

We suggest you use your distributions's package manager to install as many of the
dependencies as possible. On DEB-based Linux machines such as Debian and
Ubuntu, you should be able to install all of the needed dependencies by
issuing the command:

\terminal{$ apt-get install lua5.3 liblua5.3-dev libharfbuzz-dev libfreetype6-dev
libfontconfig1-dev libpng-dev libicu-dev}

Here’s an incantation that will work on most Redhat-based Linux distros:

\terminal{$ yum install harfbuzz-devel make automake libtool gcc
freetype-devel fontconfig-devel lua-devel libpng-devel libicu-devel}

If you are on another system, you will have to come up with the correct equivalent
packages yourself.

Once you have these requirements in place, you should then be able to unpack
the file that you downloaded from SILE’s home page, change to that directory\footnote{If you downloaded a copy of the SILE source by cloning the git
repository rather than dowloading one of the release packages you will also
need to run \code{./bootstrap.sh} to setup the configure script at this point
before continuing to the next step.}, and run:

\terminal{$ ./configure && make}

Note that if you prefer and if you system has all the required Lua packages, you
make opt to skip the download and inclusion of the required Lua rocks and opt to
use your system ones instead, in which case you will want to pass this as an option
to the configure script:

\terminal{$ ./configure --with-system-luarocks && make}

You can now run SILE as is, uninstalled:

\terminal{$ ./sile examples/simple.sil}

If all has gone well, this should produce a file \code{examples/simple.pdf}.

Most users of SILE will want to install the \code{sile} command and SILE’s
library files onto their system; this can be done with:

\terminal{$ make install}

Now the \code{sile} command is available from any directory.

\subsection{Notes for Windows users}

SILE may be built on Windows using CMake and Visual Studio. There is not an
installer (yet), but Windows executables are generated uzing Azure for every
commit. You may download these executables by selecting the latest build from
\url{https://simoncozens-github.visualstudio.com/sile/_build} and downloading
the "sile" artifact from the Artifacts drop down.

\section{Running SILE}

Let’s move to a new directory, and in a text editor, create the file
\code{hello.sil}. Copy in the content above and save the file. Now at your
command line run:

\terminal{$ sile hello}

\note{SILE will automatically provide the extension \code{.sil} to input files
if it is not provided by the user. If the input file is specified as the
hyphen character (\code{-}) then the input is taken from standard input.}

Once again, this should produce an output file \code{hello.pdf}.
Congratulations—you have just typeset your first document with SILE!

\note{SILE output filenames are generated by filing off the extension from
the first input filename and adding \code{.pdf}. If you want to write to
a different filename altogether, use the \code{-o file.pdf} command line
option to SILE. You can use \code{-o -} to write the PDF to standard output,
if you wish to use SILE as part of a pipeline.}

\section{Let’s Do Something Cool}

In \code{examples/article-template.xml}, you will find a typical DocBook 5.0
article. Normally turning DocBook to print involves a curious dance of XSLT
processors, format object processors and/or strange LaTeX packages. But SILE
can read XML files and it also comes with a \code{docbook} class, which tells
SILE how to render (admittedly, a subset of) the DocBook tags onto a page.

Turning \code{examples/article-template.xml} into
\code{examples/article-template.pdf} is now as simple as:

\begin{verbatim}
\line
\% \em{./sile -I docbook.sil examples/article-template.xml}
This is SILE \sileversion
Loading docbook
<classes/docbook.sil><examples/article-template.xml>[1] [2] [3]
\line
\end{verbatim}

The \code{-I} flag adds a \em{preamble}, which is to say that it loads up
a \em{class} before reading the input file; the \code{docbook} preamble
provides processing expectations for DocBook tags, which means that once this
is loaded, DocBook files can be processed directly as SILE documents.

In Chapter 9, we’ll look at how the \code{docbook} class works, and how you
can define processing expectations for other XML formats.
\end{document}
